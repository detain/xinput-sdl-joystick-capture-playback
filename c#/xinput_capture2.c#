using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Xna.Framework.Input;

class Program
{
    static void Main(string[] args)
    {
        // Choose device number
        int deviceNumber = 0;

        // Initialize XInput
        XInputEnable(true);

        // Create list of inputs
        List<GamepadInput> inputs = new List<GamepadInput>();

        // Start recording
        Console.WriteLine("Recording XInput joystick device {0}...", deviceNumber);
        Console.WriteLine("Press ENTER to stop recording.");

        // Create cancellation token source
        var cts = new System.Threading.CancellationTokenSource();

        // Start recording task
        var recordingTask = RecordInputAsync(deviceNumber, inputs, cts.Token);

        // Wait for user input
        Console.ReadLine();

        // Stop recording
        cts.Cancel();
        recordingTask.Wait();

        // Serialize inputs to JSON
        string json = JsonSerializer.Serialize(inputs);

        // Write JSON to file
        File.WriteAllText("gamepad_input.json", json);
    }

    static async Task RecordInputAsync(int deviceNumber, List<GamepadInput> inputs, System.Threading.CancellationToken cancellationToken)
    {
        // Create XInput state
        XINPUT_STATE state = new XINPUT_STATE();

        // Open XInput device
        IntPtr device = XInputGetState((uint)deviceNumber, ref state) == 0 ? new IntPtr(deviceNumber + 1) : IntPtr.Zero;

        // Record inputs until cancellation is requested
        while (!cancellationToken.IsCancellationRequested)
        {
            // Get XInput state for device
            uint result = XInputGetState((uint)deviceNumber, ref state);

            // Check if device is connected
            if (result == 0)
            {
                // Record button presses
                for (int i = 0; i < 14; i++)
                {
                    bool pressed = (state.Gamepad.Buttons & (ushort)(1 << i)) != 0;
                    if (pressed)
                    {
                        var input = new GamepadInput(i, TimeSpan.Zero);
                        inputs.Add(input);

                        // Record press duration
                        while ((state.Gamepad.Buttons & (ushort)(1 << i)) != 0 && !cancellationToken.IsCancellationRequested)
                        {
                            await Task.Delay(10);
                            input.PressDuration += TimeSpan.FromMilliseconds(10);
                            result = XInputGetState((uint)deviceNumber, ref state);
                            if (result != 0)
                            {
                                break;
                            }
                        }
                    }
                }

                // Record time between button presses
                if (inputs.Count > 0)
                {
                    var lastInput = inputs[inputs.Count - 1];
                    if (lastInput.PressDuration > TimeSpan.Zero)
                    {
                        var timeBetweenPresses = DateTime.Now - lastInput.PressEnd;
                        if (timeBetweenPresses > TimeSpan.Zero)
                        {
                            lastInput.TimeBetweenPresses = timeBetweenPresses;
                        }
                    }
                }
            }

            // Wait for next frame
            await Task.Delay(10);
        }

        // Close XInput device
        XInputSetState((uint)deviceNumber, ref state);
    }

    class GamepadInput
    {
        public int Button { get; set; }
        public TimeSpan PressDuration { get; set; }
        public TimeSpan TimeBetweenPresses { get; set; }

        public DateTime PressStart { get; private set; }
public DateTime PressEnd { get; private set; }

    public GamepadInput(int button, TimeSpan timeBetweenPresses)
    {
        Button = button;
        PressDuration = TimeSpan.Zero;
        TimeBetweenPresses = timeBetweenPresses;
        PressStart = DateTime.Now;
        PressEnd = DateTime.Now;
    }

    public void EndPress()
    {
        PressEnd = DateTime.Now;
    }
}

// XInput functions
[System.Runtime.InteropServices.DllImport("xinput1_4.dll", SetLastError = true)]
static extern uint XInputGetState(uint dwUserIndex, ref XINPUT_STATE pState);

[System.Runtime.InteropServices.DllImport("xinput1_4.dll", SetLastError = true)]
static extern uint XInputSetState(uint dwUserIndex, ref XINPUT_STATE pState);

[System.Runtime.InteropServices.DllImport("xinput1_4.dll", SetLastError = true)]
static extern void XInputEnable(bool enable);